createdAt: "2018-06-30T17:42:18.169Z"
updatedAt: "2018-09-22T10:32:05.914Z"
type: "MARKDOWN_NOTE"
folder: "2bd4debf0edd3bd73c5f"
title: "运算符"
content: '''
  # 运算符
  ## 
  ### 1.`&` `&&`
  运算结果是一样的
  > `&`：无论左边的运算结果是什么，右边都参与运算
  > `&&`：当左边为false时，右边不参与运算
  ---
  ### 2.`|` `||`
  运算结果是一样的
  >`|`：无论左边的运算结果是什么，右边都参与运算
  >`||`：当左边为true时，右边不参与运算
  ---
  ### 3.`++i` `i++ ` `i--` `i--`
  自增自减符号：
  > 放在变量后面表示先取变量值再自增或者自减1;
  > 放在变量前面先自增或者自减1再取变量值；
  ---
  ### 4.移位运算符： `<<` `>>` `>>>`
  
  > 对整数的二进制数进行移位处理；
  a<<b 左移：将二进制形式的 a 左移 b 位，最高位 b 为抛弃，低位(右侧)空出的 b 位补 0；
  a>>b 带符号右移： 将二进制形式的 a 右移 b 位， 最右侧的 b 为抛弃， 最高位空出的 b 位补原来的符号位；
  a>>>b 无符号右移：将二进制形式的 a 右移 b 位，最右侧的 b 为抛弃，最高位空出的 b 位补 0；
  符号位:`0正1负`
  
  ```java int a=-5```
  
  	-9 : 		  11111111 11111111 11111111 11110111
  	9 : 		  00000000 00000000 00000000 00001001 
  	-9>>3: 		[111]11111 11111111 11111111 11111110 111			// 有符号右移
  	9>>3: 		[000]00000 00000000 00000000 00000001 001			// 有符号右移
  	-9>>>3:		[000]11111 11111111 11111111 11111110 111			// 无符号右移
  	9>>>3: 		[000]00000 00000000 00000000 00000001 001			// 无符号右移
  ----
  ### 5.位运算符 `~` `&` `|` `^:`
  > `~`:取反       
  > `&`:按位与    
  > `|`按位或 
  > `^:`按位异或
  
  ##### 异或运算特点:异或的运算规律：相同为false,不同为true
  -  true ^ true=flase
  -  true ^ flase = true
  -  flase ^ true= true
  -  flase ^ flase =flase
  ---
  ### 6.数据交换
  ```Java 
  	// 方法一
  	int a=3,b=5
   	a=a+b; b=a-b; a=a-b; //如果两个整数的数值过大，会超出int范围，会强制转换，数据会变化。
  	// 方法二
  	a=a^b; b=a^b; a=a^b;
  ```
  
  
  
  
'''
tags: [
  "运算符"
]
isStarred: false
isTrashed: false
