createdAt: "2018-07-29T04:47:46.250Z"
updatedAt: "2018-09-22T10:39:10.728Z"
type: "MARKDOWN_NOTE"
folder: "7e29a740260ac6dc97a7"
title: "NIO"
content: '''
  # NIO
  
  > 操作系统与 Java 基于流的 I/O模型有些不匹配。操作系统要移动的是大块数据（缓冲 这往往是在硬件直接存储器存取（ DMA）的协助下完成的。而 JVM 的 I/O 类喜欢操作小块数据——单个字节、几行文本。结果，操作系统送来整缓冲区的数据， java.io 的流数据类再花大量时间把它们拆成小块，往往拷贝一个小块就要往返于几层对象。操作系统喜欢整卡车地运来数据， java.io 类则喜欢一铲子一铲子地加工数据。有了 NIO，就可以轻松地把一卡车数据备份到您能直接使用的地方（ ByteBuffer 对象）。`RandomAccessFile`可以实现
  
  ## 缓冲区：
  
  ![57ff677c.png](:storage/f8565548-aac5-419f-ab80-48b25b9cb03c/57ff677c.png)
  用户空间即进程内存区域，即jvm空间
  > 应用空间范文硬盘的的过程中，先向系统发送系统调用，有系统方法将数据读入内核空间，再将数据读入应用内存空间，硬件通常不能直接访问用户空间。其次，像磁盘这样基于块存储的硬件设备操作的是固定大小的数据块，而用户进程请求的可能是任意大小的或非对齐的数据块。在数据往来于用户空间与存储设备的过程中，内核负责数据的分解、再组合工作，因此充当着中间人的角色。
   
  ## 虚拟内存
  > 虚拟内存意为使用虚假（或虚拟）地址取代物理（硬件RAM）内存地址
  好处：
  * 1 一个以上的虚拟地址可指向同一个物理内存地址
  * 2 虚拟内存空间可大于实际可用的硬件内存
  由于硬件系统不能直接访问应用空间，可以将
  
'''
tags: []
isStarred: true
isTrashed: false
